// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	interfaces "github.com/IOTechSystems/go-mod-edge-utils/pkg/bootstrap/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// MessageClient is an autogenerated mock type for the MessageClient type
type MessageClient struct {
	mock.Mock
}

// Connect provides a mock function with given fields:
func (_m *MessageClient) Connect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Disconnect provides a mock function with given fields:
func (_m *MessageClient) Disconnect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAuthData provides a mock function with given fields: secretProvider
func (_m *MessageClient) SetAuthData(secretProvider interfaces.SecretProvider) error {
	ret := _m.Called(secretProvider)

	var r0 error
	if rf, ok := ret.Get(0).(func(interfaces.SecretProvider) error); ok {
		r0 = rf(secretProvider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: topics, handlerType
func (_m *MessageClient) Subscribe(topics []string, handlerType interface{}) error {
	ret := _m.Called(topics, handlerType)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, interface{}) error); ok {
		r0 = rf(topics, handlerType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: topics
func (_m *MessageClient) Unsubscribe(topics []string) error {
	ret := _m.Called(topics)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(topics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMessageClient creates a new instance of MessageClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageClient {
	mock := &MessageClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
