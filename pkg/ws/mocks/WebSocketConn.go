// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	errors "github.com/IOTechSystems/go-mod-edge-utils/pkg/errors"
	mock "github.com/stretchr/testify/mock"
)

// WebSocketConn is an autogenerated mock type for the WebSocketConn type
type WebSocketConn struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *WebSocketConn) Close() errors.Error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 errors.Error
	if rf, ok := ret.Get(0).(func() errors.Error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.Error)
		}
	}

	return r0
}

// ID provides a mock function with no fields
func (_m *WebSocketConn) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Receive provides a mock function with no fields
func (_m *WebSocketConn) Receive() (string, errors.Error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Receive")
	}

	var r0 string
	var r1 errors.Error
	if rf, ok := ret.Get(0).(func() (string, errors.Error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() errors.Error); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.Error)
		}
	}

	return r0, r1
}

// ReceiveJSON provides a mock function with no fields
func (_m *WebSocketConn) ReceiveJSON() (interface{}, errors.Error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReceiveJSON")
	}

	var r0 interface{}
	var r1 errors.Error
	if rf, ok := ret.Get(0).(func() (interface{}, errors.Error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() errors.Error); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.Error)
		}
	}

	return r0, r1
}

// Send provides a mock function with given fields: msg
func (_m *WebSocketConn) Send(msg string) errors.Error {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 errors.Error
	if rf, ok := ret.Get(0).(func(string) errors.Error); ok {
		r0 = rf(msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.Error)
		}
	}

	return r0
}

// SendJSON provides a mock function with given fields: v
func (_m *WebSocketConn) SendJSON(v interface{}) errors.Error {
	ret := _m.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for SendJSON")
	}

	var r0 errors.Error
	if rf, ok := ret.Get(0).(func(interface{}) errors.Error); ok {
		r0 = rf(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.Error)
		}
	}

	return r0
}

// NewWebSocketConn creates a new instance of WebSocketConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebSocketConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebSocketConn {
	mock := &WebSocketConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
