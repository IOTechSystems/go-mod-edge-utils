// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewSecretProvider creates a new instance of SecretProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecretProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecretProvider {
	mock := &SecretProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SecretProvider is an autogenerated mock type for the SecretProvider type
type SecretProvider struct {
	mock.Mock
}

type SecretProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *SecretProvider) EXPECT() *SecretProvider_Expecter {
	return &SecretProvider_Expecter{mock: &_m.Mock}
}

// DeregisterSecretUpdatedCallback provides a mock function for the type SecretProvider
func (_mock *SecretProvider) DeregisterSecretUpdatedCallback(secretName string) {
	_mock.Called(secretName)
	return
}

// SecretProvider_DeregisterSecretUpdatedCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeregisterSecretUpdatedCallback'
type SecretProvider_DeregisterSecretUpdatedCallback_Call struct {
	*mock.Call
}

// DeregisterSecretUpdatedCallback is a helper method to define mock.On call
//   - secretName
func (_e *SecretProvider_Expecter) DeregisterSecretUpdatedCallback(secretName interface{}) *SecretProvider_DeregisterSecretUpdatedCallback_Call {
	return &SecretProvider_DeregisterSecretUpdatedCallback_Call{Call: _e.mock.On("DeregisterSecretUpdatedCallback", secretName)}
}

func (_c *SecretProvider_DeregisterSecretUpdatedCallback_Call) Run(run func(secretName string)) *SecretProvider_DeregisterSecretUpdatedCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SecretProvider_DeregisterSecretUpdatedCallback_Call) Return() *SecretProvider_DeregisterSecretUpdatedCallback_Call {
	_c.Call.Return()
	return _c
}

func (_c *SecretProvider_DeregisterSecretUpdatedCallback_Call) RunAndReturn(run func(secretName string)) *SecretProvider_DeregisterSecretUpdatedCallback_Call {
	_c.Run(run)
	return _c
}

// GetMetricsToRegister provides a mock function for the type SecretProvider
func (_mock *SecretProvider) GetMetricsToRegister() map[string]any {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetricsToRegister")
	}

	var r0 map[string]any
	if returnFunc, ok := ret.Get(0).(func() map[string]any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]any)
		}
	}
	return r0
}

// SecretProvider_GetMetricsToRegister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetricsToRegister'
type SecretProvider_GetMetricsToRegister_Call struct {
	*mock.Call
}

// GetMetricsToRegister is a helper method to define mock.On call
func (_e *SecretProvider_Expecter) GetMetricsToRegister() *SecretProvider_GetMetricsToRegister_Call {
	return &SecretProvider_GetMetricsToRegister_Call{Call: _e.mock.On("GetMetricsToRegister")}
}

func (_c *SecretProvider_GetMetricsToRegister_Call) Run(run func()) *SecretProvider_GetMetricsToRegister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SecretProvider_GetMetricsToRegister_Call) Return(stringToV map[string]any) *SecretProvider_GetMetricsToRegister_Call {
	_c.Call.Return(stringToV)
	return _c
}

func (_c *SecretProvider_GetMetricsToRegister_Call) RunAndReturn(run func() map[string]any) *SecretProvider_GetMetricsToRegister_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecret provides a mock function for the type SecretProvider
func (_mock *SecretProvider) GetSecret(secretName string, keys ...string) (map[string]string, error) {
	var tmpRet mock.Arguments
	if len(keys) > 0 {
		tmpRet = _mock.Called(secretName, keys)
	} else {
		tmpRet = _mock.Called(secretName)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetSecret")
	}

	var r0 map[string]string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, ...string) (map[string]string, error)); ok {
		return returnFunc(secretName, keys...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, ...string) map[string]string); ok {
		r0 = returnFunc(secretName, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = returnFunc(secretName, keys...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SecretProvider_GetSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecret'
type SecretProvider_GetSecret_Call struct {
	*mock.Call
}

// GetSecret is a helper method to define mock.On call
//   - secretName
//   - keys
func (_e *SecretProvider_Expecter) GetSecret(secretName interface{}, keys ...interface{}) *SecretProvider_GetSecret_Call {
	return &SecretProvider_GetSecret_Call{Call: _e.mock.On("GetSecret",
		append([]interface{}{secretName}, keys...)...)}
}

func (_c *SecretProvider_GetSecret_Call) Run(run func(secretName string, keys ...string)) *SecretProvider_GetSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *SecretProvider_GetSecret_Call) Return(stringToString map[string]string, err error) *SecretProvider_GetSecret_Call {
	_c.Call.Return(stringToString, err)
	return _c
}

func (_c *SecretProvider_GetSecret_Call) RunAndReturn(run func(secretName string, keys ...string) (map[string]string, error)) *SecretProvider_GetSecret_Call {
	_c.Call.Return(run)
	return _c
}

// GetSelfJWT provides a mock function for the type SecretProvider
func (_mock *SecretProvider) GetSelfJWT() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSelfJWT")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SecretProvider_GetSelfJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSelfJWT'
type SecretProvider_GetSelfJWT_Call struct {
	*mock.Call
}

// GetSelfJWT is a helper method to define mock.On call
func (_e *SecretProvider_Expecter) GetSelfJWT() *SecretProvider_GetSelfJWT_Call {
	return &SecretProvider_GetSelfJWT_Call{Call: _e.mock.On("GetSelfJWT")}
}

func (_c *SecretProvider_GetSelfJWT_Call) Run(run func()) *SecretProvider_GetSelfJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SecretProvider_GetSelfJWT_Call) Return(s string, err error) *SecretProvider_GetSelfJWT_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *SecretProvider_GetSelfJWT_Call) RunAndReturn(run func() (string, error)) *SecretProvider_GetSelfJWT_Call {
	_c.Call.Return(run)
	return _c
}

// HasSecret provides a mock function for the type SecretProvider
func (_mock *SecretProvider) HasSecret(secretName string) (bool, error) {
	ret := _mock.Called(secretName)

	if len(ret) == 0 {
		panic("no return value specified for HasSecret")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return returnFunc(secretName)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(secretName)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(secretName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SecretProvider_HasSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasSecret'
type SecretProvider_HasSecret_Call struct {
	*mock.Call
}

// HasSecret is a helper method to define mock.On call
//   - secretName
func (_e *SecretProvider_Expecter) HasSecret(secretName interface{}) *SecretProvider_HasSecret_Call {
	return &SecretProvider_HasSecret_Call{Call: _e.mock.On("HasSecret", secretName)}
}

func (_c *SecretProvider_HasSecret_Call) Run(run func(secretName string)) *SecretProvider_HasSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SecretProvider_HasSecret_Call) Return(b bool, err error) *SecretProvider_HasSecret_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *SecretProvider_HasSecret_Call) RunAndReturn(run func(secretName string) (bool, error)) *SecretProvider_HasSecret_Call {
	_c.Call.Return(run)
	return _c
}

// IsJWTValid provides a mock function for the type SecretProvider
func (_mock *SecretProvider) IsJWTValid(jwt string) (bool, error) {
	ret := _mock.Called(jwt)

	if len(ret) == 0 {
		panic("no return value specified for IsJWTValid")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return returnFunc(jwt)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(jwt)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(jwt)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SecretProvider_IsJWTValid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsJWTValid'
type SecretProvider_IsJWTValid_Call struct {
	*mock.Call
}

// IsJWTValid is a helper method to define mock.On call
//   - jwt
func (_e *SecretProvider_Expecter) IsJWTValid(jwt interface{}) *SecretProvider_IsJWTValid_Call {
	return &SecretProvider_IsJWTValid_Call{Call: _e.mock.On("IsJWTValid", jwt)}
}

func (_c *SecretProvider_IsJWTValid_Call) Run(run func(jwt string)) *SecretProvider_IsJWTValid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SecretProvider_IsJWTValid_Call) Return(b bool, err error) *SecretProvider_IsJWTValid_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *SecretProvider_IsJWTValid_Call) RunAndReturn(run func(jwt string) (bool, error)) *SecretProvider_IsJWTValid_Call {
	_c.Call.Return(run)
	return _c
}

// ListSecretNames provides a mock function for the type SecretProvider
func (_mock *SecretProvider) ListSecretNames() ([]string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListSecretNames")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SecretProvider_ListSecretNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSecretNames'
type SecretProvider_ListSecretNames_Call struct {
	*mock.Call
}

// ListSecretNames is a helper method to define mock.On call
func (_e *SecretProvider_Expecter) ListSecretNames() *SecretProvider_ListSecretNames_Call {
	return &SecretProvider_ListSecretNames_Call{Call: _e.mock.On("ListSecretNames")}
}

func (_c *SecretProvider_ListSecretNames_Call) Run(run func()) *SecretProvider_ListSecretNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SecretProvider_ListSecretNames_Call) Return(strings []string, err error) *SecretProvider_ListSecretNames_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *SecretProvider_ListSecretNames_Call) RunAndReturn(run func() ([]string, error)) *SecretProvider_ListSecretNames_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterSecretUpdatedCallback provides a mock function for the type SecretProvider
func (_mock *SecretProvider) RegisterSecretUpdatedCallback(secretName string, callback func(secretName string)) error {
	ret := _mock.Called(secretName, callback)

	if len(ret) == 0 {
		panic("no return value specified for RegisterSecretUpdatedCallback")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, func(secretName string)) error); ok {
		r0 = returnFunc(secretName, callback)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SecretProvider_RegisterSecretUpdatedCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterSecretUpdatedCallback'
type SecretProvider_RegisterSecretUpdatedCallback_Call struct {
	*mock.Call
}

// RegisterSecretUpdatedCallback is a helper method to define mock.On call
//   - secretName
//   - callback
func (_e *SecretProvider_Expecter) RegisterSecretUpdatedCallback(secretName interface{}, callback interface{}) *SecretProvider_RegisterSecretUpdatedCallback_Call {
	return &SecretProvider_RegisterSecretUpdatedCallback_Call{Call: _e.mock.On("RegisterSecretUpdatedCallback", secretName, callback)}
}

func (_c *SecretProvider_RegisterSecretUpdatedCallback_Call) Run(run func(secretName string, callback func(secretName string))) *SecretProvider_RegisterSecretUpdatedCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(secretName string)))
	})
	return _c
}

func (_c *SecretProvider_RegisterSecretUpdatedCallback_Call) Return(err error) *SecretProvider_RegisterSecretUpdatedCallback_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SecretProvider_RegisterSecretUpdatedCallback_Call) RunAndReturn(run func(secretName string, callback func(secretName string)) error) *SecretProvider_RegisterSecretUpdatedCallback_Call {
	_c.Call.Return(run)
	return _c
}

// SecretUpdatedAtSecretName provides a mock function for the type SecretProvider
func (_mock *SecretProvider) SecretUpdatedAtSecretName(secretName string) {
	_mock.Called(secretName)
	return
}

// SecretProvider_SecretUpdatedAtSecretName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SecretUpdatedAtSecretName'
type SecretProvider_SecretUpdatedAtSecretName_Call struct {
	*mock.Call
}

// SecretUpdatedAtSecretName is a helper method to define mock.On call
//   - secretName
func (_e *SecretProvider_Expecter) SecretUpdatedAtSecretName(secretName interface{}) *SecretProvider_SecretUpdatedAtSecretName_Call {
	return &SecretProvider_SecretUpdatedAtSecretName_Call{Call: _e.mock.On("SecretUpdatedAtSecretName", secretName)}
}

func (_c *SecretProvider_SecretUpdatedAtSecretName_Call) Run(run func(secretName string)) *SecretProvider_SecretUpdatedAtSecretName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SecretProvider_SecretUpdatedAtSecretName_Call) Return() *SecretProvider_SecretUpdatedAtSecretName_Call {
	_c.Call.Return()
	return _c
}

func (_c *SecretProvider_SecretUpdatedAtSecretName_Call) RunAndReturn(run func(secretName string)) *SecretProvider_SecretUpdatedAtSecretName_Call {
	_c.Run(run)
	return _c
}

// SecretsLastUpdated provides a mock function for the type SecretProvider
func (_mock *SecretProvider) SecretsLastUpdated() time.Time {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SecretsLastUpdated")
	}

	var r0 time.Time
	if returnFunc, ok := ret.Get(0).(func() time.Time); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	return r0
}

// SecretProvider_SecretsLastUpdated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SecretsLastUpdated'
type SecretProvider_SecretsLastUpdated_Call struct {
	*mock.Call
}

// SecretsLastUpdated is a helper method to define mock.On call
func (_e *SecretProvider_Expecter) SecretsLastUpdated() *SecretProvider_SecretsLastUpdated_Call {
	return &SecretProvider_SecretsLastUpdated_Call{Call: _e.mock.On("SecretsLastUpdated")}
}

func (_c *SecretProvider_SecretsLastUpdated_Call) Run(run func()) *SecretProvider_SecretsLastUpdated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SecretProvider_SecretsLastUpdated_Call) Return(time1 time.Time) *SecretProvider_SecretsLastUpdated_Call {
	_c.Call.Return(time1)
	return _c
}

func (_c *SecretProvider_SecretsLastUpdated_Call) RunAndReturn(run func() time.Time) *SecretProvider_SecretsLastUpdated_Call {
	_c.Call.Return(run)
	return _c
}

// SecretsUpdated provides a mock function for the type SecretProvider
func (_mock *SecretProvider) SecretsUpdated() {
	_mock.Called()
	return
}

// SecretProvider_SecretsUpdated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SecretsUpdated'
type SecretProvider_SecretsUpdated_Call struct {
	*mock.Call
}

// SecretsUpdated is a helper method to define mock.On call
func (_e *SecretProvider_Expecter) SecretsUpdated() *SecretProvider_SecretsUpdated_Call {
	return &SecretProvider_SecretsUpdated_Call{Call: _e.mock.On("SecretsUpdated")}
}

func (_c *SecretProvider_SecretsUpdated_Call) Run(run func()) *SecretProvider_SecretsUpdated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SecretProvider_SecretsUpdated_Call) Return() *SecretProvider_SecretsUpdated_Call {
	_c.Call.Return()
	return _c
}

func (_c *SecretProvider_SecretsUpdated_Call) RunAndReturn(run func()) *SecretProvider_SecretsUpdated_Call {
	_c.Run(run)
	return _c
}

// StoreSecret provides a mock function for the type SecretProvider
func (_mock *SecretProvider) StoreSecret(secretName string, secrets map[string]string) error {
	ret := _mock.Called(secretName, secrets)

	if len(ret) == 0 {
		panic("no return value specified for StoreSecret")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, map[string]string) error); ok {
		r0 = returnFunc(secretName, secrets)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SecretProvider_StoreSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreSecret'
type SecretProvider_StoreSecret_Call struct {
	*mock.Call
}

// StoreSecret is a helper method to define mock.On call
//   - secretName
//   - secrets
func (_e *SecretProvider_Expecter) StoreSecret(secretName interface{}, secrets interface{}) *SecretProvider_StoreSecret_Call {
	return &SecretProvider_StoreSecret_Call{Call: _e.mock.On("StoreSecret", secretName, secrets)}
}

func (_c *SecretProvider_StoreSecret_Call) Run(run func(secretName string, secrets map[string]string)) *SecretProvider_StoreSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]string))
	})
	return _c
}

func (_c *SecretProvider_StoreSecret_Call) Return(err error) *SecretProvider_StoreSecret_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SecretProvider_StoreSecret_Call) RunAndReturn(run func(secretName string, secrets map[string]string) error) *SecretProvider_StoreSecret_Call {
	_c.Call.Return(run)
	return _c
}
